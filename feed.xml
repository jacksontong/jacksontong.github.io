<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-01-11T11:10:05+00:00</updated><id>/feed.xml</id><title type="html">BrickCrafted</title><subtitle>Welcome to BrickCrafted, my personal blog where I share my experiences, insights, and tips about coding and software architecture.</subtitle><author><name>Jackson Tong</name><email>tongtoan2704@gmail.com</email></author><entry><title type="html">Using gomock to mock Interfaces in Go</title><link href="/2025/01/11/using-gomock-to-mock-interfaces-in-go.html" rel="alternate" type="text/html" title="Using gomock to mock Interfaces in Go" /><published>2025-01-11T00:00:00+00:00</published><updated>2025-01-11T00:00:00+00:00</updated><id>/2025/01/11/using-gomock-to-mock-interfaces-in-go</id><content type="html" xml:base="/2025/01/11/using-gomock-to-mock-interfaces-in-go.html"><![CDATA[<p>Unit testing is a critical aspect of software development, ensuring that your code behaves as expected. However, testing code that interacts with external systems, such as databases or APIs, can be challenging. Mocking comes to the rescue by simulating external dependencies, allowing you to test your code in isolation.</p>

<p>In this post, we’ll explore the concept of mocking and demonstrate how to use gomock to create mock implementations of interfaces in Go. By the end, you’ll understand how to effectively test code that depends on external systems.</p>

<h2 id="what-is-mocking">What is Mocking?</h2>

<p><strong>Mocks</strong> are simulated objects that mimic the behavior of real objects. In the context of unit tests, mocks are used to:</p>
<ul>
  <li>Replace external dependencies.</li>
  <li>Control the behavior of external interactions.</li>
  <li>Verify that the correct methods are called with expected arguments.</li>
</ul>

<p>Mocking is essential for isolating the unit of code being tested, enabling precise and reliable tests.</p>

<h2 id="why-use-mocking-in-unit-tests">Why Use Mocking in Unit Tests?</h2>

<p>Interacting with real databases or APIs during unit tests can lead to issues such as:</p>
<ul>
  <li><strong>Inconsistencies</strong>: The external system might change over time.</li>
  <li><strong>Slow Tests</strong>: External interactions can introduce latency.</li>
  <li><strong>Complex Setup</strong>: Configuring and maintaining real systems for testing can be cumbersome.</li>
</ul>

<p>To address these issues, we define interfaces representing external dependencies and create mock implementations of those interfaces for our tests.</p>

<h2 id="introducing-gomock">Introducing gomock</h2>

<p><a href="https://github.com/uber-go/mock">gomock</a> is a powerful library for generating and using mocks in Go. It integrates seamlessly with your testing framework, providing a simple way to create and verify mocks.</p>

<p>Let’s walk through an example of using gomock to mock an interface.</p>

<h2 id="step-1-define-the-interface">Step 1: Define the Interface</h2>

<p>Create the <code class="language-plaintext highlighter-rouge">PostRepository</code> interface in <code class="language-plaintext highlighter-rouge">internal/repositories/post_repository.go</code>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">repositories</span>

<span class="k">type</span> <span class="n">PostRepository</span> <span class="k">interface</span> <span class="p">{</span>
  <span class="n">Create</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">post</span> <span class="o">*</span><span class="n">Post</span><span class="p">)</span> <span class="p">(</span><span class="n">id</span> <span class="kt">int</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This interface will be used by the <code class="language-plaintext highlighter-rouge">PostService</code> to create new posts.</p>

<h2 id="step-2-create-the-service">Step 2: Create the Service</h2>

<p>Define the <code class="language-plaintext highlighter-rouge">PostService</code> in <code class="language-plaintext highlighter-rouge">internal/services/post_service.go</code>. This service uses the <code class="language-plaintext highlighter-rouge">PostRepository</code> interface to perform its operations:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">services</span>

<span class="k">type</span> <span class="n">PostService</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">r</span> <span class="n">PostRepository</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewPostService</span><span class="p">(</span><span class="n">r</span> <span class="n">PostRepository</span><span class="p">)</span> <span class="n">PostService</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">PostService</span><span class="p">{</span><span class="n">r</span><span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="n">PostService</span><span class="p">)</span> <span class="n">Create</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">post</span> <span class="o">*</span><span class="n">Post</span><span class="p">)</span> <span class="p">(</span><span class="n">id</span> <span class="kt">int</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">r</span><span class="o">.</span><span class="n">Create</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">post</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>By depending on the <code class="language-plaintext highlighter-rouge">PostRepository</code> interface, <code class="language-plaintext highlighter-rouge">PostService</code> can work with any implementation, including mocks.</p>

<h2 id="step-3-install-gomock-and-mockgen">Step 3: Install gomock and mockgen</h2>

<p>Install the required tools for generating and using mocks:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go <span class="nb">install </span>go.uber.org/mock/mockgen@latest
go get go.uber.org/mock
</code></pre></div></div>

<h2 id="step-4-generate-mock-code">Step 4: Generate Mock Code</h2>

<p>Generate a mock implementation of the <code class="language-plaintext highlighter-rouge">PostRepository</code> interface in <code class="language-plaintext highlighter-rouge">internal/mocks/post_repository.go</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mockgen <span class="nt">-source</span><span class="o">=</span>internal/repositories/post_repository.go <span class="se">\</span>
    <span class="nt">-destination</span><span class="o">=</span>internal/mocks/post_repository.go <span class="se">\</span>
    <span class="nt">-package</span><span class="o">=</span>mocks
</code></pre></div></div>

<p>This command generates a mock file that implements the <code class="language-plaintext highlighter-rouge">PostRepository</code> interface.</p>

<h2 id="step-5-write-unit-tests">Step 5: Write Unit Tests</h2>

<p>Create a test file <code class="language-plaintext highlighter-rouge">internal/services/post_service_test.go</code> and write tests for the <code class="language-plaintext highlighter-rouge">PostService</code> using the generated mock:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">services</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"context"</span>
  <span class="s">"testing"</span>

  <span class="s">"your-module/internal/repositories/mocks"</span>
  <span class="s">"github.com/stretchr/testify/assert"</span>
  <span class="s">"go.uber.org/mock/gomock"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestPostService_Create</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">ctrl</span> <span class="o">:=</span> <span class="n">gomock</span><span class="o">.</span><span class="n">NewController</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
  <span class="k">defer</span> <span class="n">ctrl</span><span class="o">.</span><span class="n">Finish</span><span class="p">()</span>

  <span class="n">repo</span> <span class="o">:=</span> <span class="n">mocks</span><span class="o">.</span><span class="n">NewMockPostRepository</span><span class="p">(</span><span class="n">ctrl</span><span class="p">)</span>

  <span class="n">ctx</span> <span class="o">:=</span> <span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">()</span>
  <span class="n">post</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">repositories</span><span class="o">.</span><span class="n">Post</span><span class="p">{</span><span class="n">Title</span><span class="o">:</span> <span class="s">"Test Post"</span><span class="p">,</span> <span class="n">Content</span><span class="o">:</span> <span class="s">"This is a test post."</span><span class="p">}</span>
  <span class="n">repo</span><span class="o">.</span><span class="n">EXPECT</span><span class="p">()</span><span class="o">.</span><span class="n">Create</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">post</span><span class="p">)</span><span class="o">.</span><span class="n">Return</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>

  <span class="n">service</span> <span class="o">:=</span> <span class="n">NewPostService</span><span class="p">(</span><span class="n">repo</span><span class="p">)</span>
  <span class="n">id</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">service</span><span class="o">.</span><span class="n">Create</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">post</span><span class="p">)</span>

  <span class="n">assert</span><span class="o">.</span><span class="n">NoError</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
  <span class="n">assert</span><span class="o">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="n">id</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="explanation">Explanation:</h3>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">gomock.NewController</code></strong>: Initializes a mock controller to manage mock expectations.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">repo.EXPECT()</code></strong>: Specifies the expected behavior of the mock, including method calls and return values.</li>
  <li><strong>Assertions</strong>: Verify that the <code class="language-plaintext highlighter-rouge">PostService</code> behaves as expected.</li>
</ul>

<h2 id="pros-and-cons-of-using-gomock">Pros and Cons of Using gomock</h2>

<h3 id="pros">Pros</h3>
<ul>
  <li><strong>Ease of Use</strong>: Simplifies mocking with clear syntax for defining expectations.</li>
  <li><strong>Integration</strong>: Works seamlessly with Go’s testing framework.</li>
  <li><strong>Automatic Generation</strong>: Reduces manual effort by generating mocks from interfaces.</li>
</ul>

<h3 id="cons">Cons</h3>
<ul>
  <li><strong>Learning Curve</strong>: Requires understanding of mock concepts and gomock syntax.</li>
  <li><strong>Maintenance</strong>: Generated code can add complexity to the codebase.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Mocking is a vital technique for writing effective unit tests, and gomock makes it straightforward to create and use mocks in Go. By isolating your code from external dependencies, you can write reliable and focused tests. While gomock has its trade-offs, its benefits often outweigh its drawbacks, especially for complex projects.</p>

<p>Try incorporating gomock into your testing workflow to streamline your development process and improve code quality!</p>]]></content><author><name>Jackson Tong</name><email>tongtoan2704@gmail.com</email></author><category term="go" /><category term="testing" /><summary type="html"><![CDATA[Unit testing is a critical aspect of software development, ensuring that your code behaves as expected. However, testing code that interacts with external systems, such as databases or APIs, can be challenging. Mocking comes to the rescue by simulating external dependencies, allowing you to test your code in isolation.]]></summary></entry><entry><title type="html">Setting Up a VSCode Devcontainer Using Docker Compose</title><link href="/2024/12/31/setting-up-a-vscode-devcontainer-using-docker-compose.html" rel="alternate" type="text/html" title="Setting Up a VSCode Devcontainer Using Docker Compose" /><published>2024-12-31T00:00:00+00:00</published><updated>2024-12-31T00:00:00+00:00</updated><id>/2024/12/31/setting-up-a-vscode-devcontainer-using-docker-compose</id><content type="html" xml:base="/2024/12/31/setting-up-a-vscode-devcontainer-using-docker-compose.html"><![CDATA[<p>Setting up a development environment can sometimes be challenging, especially when multiple services are involved. Fortunately, with Docker Compose and VSCode Devcontainers, you can create a streamlined setup that includes all necessary dependencies and services for your project.</p>

<p>This tutorial will guide you through setting up a VSCode Devcontainer for a Go project using Docker Compose. With this setup, you can run multiple services like PostgreSQL and pgAdmin alongside your application.</p>

<h2 id="step-1-create-a-env-file">Step 1: Create a <code class="language-plaintext highlighter-rouge">.env</code> File</h2>

<p>First, create a <code class="language-plaintext highlighter-rouge">.env</code> file to store your database credentials and other environment-specific configurations:</p>

<pre><code class="language-env">DB_USER=dev
DB_PASSWORD=secret
DB_NAME=dev_db
DB_HOST=db

PGADMIN_DEFAULT_EMAIL=anonymous@example.com
PGADMIN_DEFAULT_PASSWORD=secret
</code></pre>

<p>This file centralizes environment variables, making them easier to manage and preventing hardcoding sensitive information into your codebase.</p>

<h2 id="step-2-create-a-docker-composeyaml-file">Step 2: Create a <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code> File</h2>

<p>Next, define your services in a <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code> file. Here is an example configuration:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="na">app</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mcr.microsoft.com/vscode/devcontainers/go:1.23-bookworm</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">${APP_PORT:-8080}:8080"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">.:/workspace:cached</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">sleep infinity</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">postgres:17</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db-data:/var/lib/postgresql/data</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">POSTGRES_USER</span><span class="pi">:</span> <span class="s">${DB_USER}</span>
      <span class="na">POSTGRES_PASSWORD</span><span class="pi">:</span> <span class="s">${DB_PASSWORD}</span>
      <span class="na">POSTGRES_DB</span><span class="pi">:</span> <span class="s">${DB_NAME}</span>
  <span class="na">pgadmin</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">dpage/pgadmin4</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">${PGADMIN_PORT:-5050}:80"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">PGADMIN_DEFAULT_EMAIL</span><span class="pi">:</span> <span class="s">${PGADMIN_DEFAULT_EMAIL}</span>
      <span class="na">PGADMIN_DEFAULT_PASSWORD</span><span class="pi">:</span> <span class="s">${PGADMIN_DEFAULT_PASSWORD}</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">db-data</span><span class="pi">:</span>
</code></pre></div></div>

<h3 id="explanation">Explanation:</h3>
<ul>
  <li><strong>app</strong>: The Go development container. You can use any Go image here; this example uses the Microsoft-based image because it comes pre-packaged with tools and configurations that work well in a Devcontainer environment. The <code class="language-plaintext highlighter-rouge">command: sleep infinity</code> ensures the container stays alive while developing.</li>
  <li><strong>db</strong>: A PostgreSQL service with a mounted volume for persistent storage.</li>
  <li><strong>pgadmin</strong>: A pgAdmin service for managing your PostgreSQL database via a web interface.</li>
  <li><strong>volumes</strong>: Shared volume for the database to persist data.</li>
</ul>

<h2 id="step-3-create-a-devcontainerjson-file">Step 3: Create a <code class="language-plaintext highlighter-rouge">devcontainer.json</code> File</h2>

<p>Configure the Devcontainer settings by creating a <code class="language-plaintext highlighter-rouge">.devcontainer/devcontainer.json</code> file:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Go Development Container"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dockerComposeFile"</span><span class="p">:</span><span class="w"> </span><span class="s2">"../docker-compose.yaml"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"service"</span><span class="p">:</span><span class="w"> </span><span class="s2">"app"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"workspaceFolder"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/workspace"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"customizations"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"vscode"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"extensions"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"golang.Go"</span><span class="p">,</span><span class="w"> </span><span class="s2">"EditorConfig.EditorConfig"</span><span class="p">],</span><span class="w">
      </span><span class="nl">"settings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"terminal.integrated.defaultProfile.linux"</span><span class="p">:</span><span class="w"> </span><span class="s2">"zsh"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"terminal.integrated.profiles.linux"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"zsh"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/bin/zsh"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"remoteUser"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vscode"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"shutdownAction"</span><span class="p">:</span><span class="w"> </span><span class="s2">"stopCompose"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="key-configuration">Key Configuration:</h3>
<ul>
  <li><strong>dockerComposeFile</strong>: Links to your <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code> file.</li>
  <li><strong>service</strong>: Specifies the primary container (the Go development container).</li>
  <li><strong>workspaceFolder</strong>: Sets the folder inside the container to map your project files.</li>
  <li><strong>customizations</strong>: Installs VSCode extensions for Go development and configures the terminal to use Zsh.</li>
  <li><strong>remoteUser</strong>: Ensures all operations inside the container run as the <code class="language-plaintext highlighter-rouge">vscode</code> user.</li>
</ul>

<h2 id="step-4-create-a-go-application-to-test-database-connection">Step 4: Create a Go Application to Test Database Connection</h2>

<p>To ensure your setup works, create a <code class="language-plaintext highlighter-rouge">main.go</code> file that tests the connection to the PostgreSQL database:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"database/sql"</span>
	<span class="s">"fmt"</span>
	<span class="s">"log"</span>
	<span class="s">"os"</span>

	<span class="n">_</span> <span class="s">"github.com/joho/godotenv/autoload"</span>
	<span class="n">_</span> <span class="s">"github.com/lib/pq"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">dbUser</span> <span class="o">:=</span> <span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"DB_USER"</span><span class="p">)</span>
	<span class="n">dbName</span> <span class="o">:=</span> <span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"DB_NAME"</span><span class="p">)</span>
	<span class="n">dbPass</span> <span class="o">:=</span> <span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"DB_PASSWORD"</span><span class="p">)</span>
	<span class="n">dbHost</span> <span class="o">:=</span> <span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"DB_HOST"</span><span class="p">)</span>

	<span class="n">connStr</span> <span class="o">:=</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span>
		<span class="s">"host=%s user=%s password=%s dbname=%s sslmode=disable"</span><span class="p">,</span>
		<span class="n">dbHost</span><span class="p">,</span> <span class="n">dbUser</span><span class="p">,</span> <span class="n">dbPass</span><span class="p">,</span> <span class="n">dbName</span><span class="p">,</span>
	<span class="p">)</span>

	<span class="c">// Open a connection to the database</span>
	<span class="n">db</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">sql</span><span class="o">.</span><span class="n">Open</span><span class="p">(</span><span class="s">"postgres"</span><span class="p">,</span> <span class="n">connStr</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to open database: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="n">db</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

	<span class="c">// Ping the database to verify the connection</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">db</span><span class="o">.</span><span class="n">Ping</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to ping database: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Successfully connected to the database!"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="key-points">Key Points:</h3>
<ul>
  <li>This code uses environment variables to configure the database connection.</li>
  <li>It connects to the PostgreSQL database and verifies the connection using <code class="language-plaintext highlighter-rouge">db.Ping()</code>.</li>
</ul>

<h2 id="step-5-open-project-in-vscode-devcontainer">Step 5: Open Project in VSCode Devcontainer</h2>

<p>Open the project in VSCode Devcontainer. Once the container is running, execute the following command to test the database connection:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run main.go
</code></pre></div></div>

<p>You should see the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Successfully connected to the database!
</code></pre></div></div>

<h2 id="accessing-pgadmin">Accessing pgAdmin</h2>

<p>After starting the containers, you can access pgAdmin at <a href="http://localhost:5050">http://localhost:5050</a>. Use the credentials you specified in the environment variables to log in.</p>

<h2 id="source-code-and-documentation">Source Code and Documentation</h2>

<ul>
  <li><strong>Source Code</strong>: The complete setup can be found on <a href="https://github.com/jacksontong/devcontainer-compose">GitHub</a>.</li>
  <li><strong>VSCode Devcontainer Documentation</strong>: For more information on configuring Devcontainers, visit the <a href="https://code.visualstudio.com/docs/devcontainers/containers">official VSCode documentation</a>.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Using Docker Compose with VSCode Devcontainers provides a powerful and efficient way to manage a development environment with multiple services. This tutorial showed how to set up a Go project with PostgreSQL and pgAdmin, enabling seamless integration and testing. Feel free to expand this setup with additional services as needed for your projects!</p>]]></content><author><name>Jackson Tong</name><email>tongtoan2704@gmail.com</email></author><category term="go" /><category term="docker" /><category term="postgres" /><summary type="html"><![CDATA[Setting up a development environment can sometimes be challenging, especially when multiple services are involved. Fortunately, with Docker Compose and VSCode Devcontainers, you can create a streamlined setup that includes all necessary dependencies and services for your project.]]></summary></entry><entry><title type="html">A Simple Approach to Managing Configuration in Go</title><link href="/2024/12/30/a-simple-approach-to-managing-configuration-in-go.html" rel="alternate" type="text/html" title="A Simple Approach to Managing Configuration in Go" /><published>2024-12-30T00:00:00+00:00</published><updated>2024-12-30T00:00:00+00:00</updated><id>/2024/12/30/a-simple-approach-to-managing-configuration-in-go</id><content type="html" xml:base="/2024/12/30/a-simple-approach-to-managing-configuration-in-go.html"><![CDATA[<p>Managing configuration in a Go project can be simple and highly productive, enhancing both maintainability and development speed. For small to medium-sized projects, a straightforward solution can often be more effective and easier to maintain. In this post, we’ll explore a lightweight and custom approach to handling configuration in Go using struct tags and environment variables.</p>

<h2 id="the-simple-approach-using-struct-tags-and-reflection">The Simple Approach: Using Struct Tags and Reflection</h2>

<p>Here is an example implementation for managing configuration:</p>

<h3 id="step-1-define-the-config-struct">Step 1: Define the Config Struct</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Config</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">AppPort</span>       <span class="kt">string</span> <span class="s">`mapstructure:"APP_PORT"`</span>
	<span class="n">Environment</span>   <span class="kt">string</span> <span class="s">`mapstructure:"ENVIRONMENT"`</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">Config</code> struct serves as the blueprint for your application’s configuration. Each field represents a configuration value, annotated with a <code class="language-plaintext highlighter-rouge">mapstructure</code> tag to specify the corresponding environment variable name.</p>

<ul>
  <li><strong>Struct Tags</strong>: The <code class="language-plaintext highlighter-rouge">mapstructure</code> tag explicitly defines which environment variable maps to each field. For example, <code class="language-plaintext highlighter-rouge">APP_PORT</code> maps to <code class="language-plaintext highlighter-rouge">AppPort</code>.</li>
  <li><strong>Fallback Mechanism</strong>: If no <code class="language-plaintext highlighter-rouge">mapstructure</code> tag is provided, the field name (converted to uppercase) is used as the default environment variable name.</li>
</ul>

<h3 id="step-2-define-the-loadconfig-function">Step 2: Define the LoadConfig Function</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">config</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"os"</span>
    <span class="s">"reflect"</span>
    <span class="s">"strings"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">LoadConfig</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="n">Config</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cfg</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Config</span><span class="p">{</span>
        <span class="n">AppPort</span><span class="o">:</span>     <span class="s">"8080"</span><span class="p">,</span>
        <span class="n">Environment</span><span class="o">:</span> <span class="s">"development"</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="n">v</span> <span class="o">:=</span> <span class="n">reflect</span><span class="o">.</span><span class="n">ValueOf</span><span class="p">(</span><span class="n">cfg</span><span class="p">)</span><span class="o">.</span><span class="n">Elem</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">v</span><span class="o">.</span><span class="n">NumField</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">field</span> <span class="o">:=</span> <span class="n">v</span><span class="o">.</span><span class="n">Type</span><span class="p">()</span><span class="o">.</span><span class="n">Field</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">envVar</span> <span class="o">:=</span> <span class="n">field</span><span class="o">.</span><span class="n">Tag</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="s">"mapstructure"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">envVar</span> <span class="o">==</span> <span class="s">""</span> <span class="p">{</span>
            <span class="n">envVar</span> <span class="o">=</span> <span class="n">strings</span><span class="o">.</span><span class="n">ToUpper</span><span class="p">(</span><span class="n">field</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="n">value</span><span class="p">,</span> <span class="n">exists</span> <span class="o">:=</span> <span class="n">os</span><span class="o">.</span><span class="n">LookupEnv</span><span class="p">(</span><span class="n">envVar</span><span class="p">);</span> <span class="n">exists</span> <span class="p">{</span>
            <span class="n">v</span><span class="o">.</span><span class="n">Field</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">SetString</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">cfg</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">LoadConfig</code> function populates the <code class="language-plaintext highlighter-rouge">Config</code> struct with values from environment variables:</p>

<ul>
  <li><strong>Default Values</strong>: Initializes the struct with sensible defaults (e.g., <code class="language-plaintext highlighter-rouge">AppPort</code> is set to <code class="language-plaintext highlighter-rouge">8080</code> and <code class="language-plaintext highlighter-rouge">Environment</code> to <code class="language-plaintext highlighter-rouge">development</code>).</li>
  <li><strong>Reflection</strong>: Iterates over each struct field using Go’s <code class="language-plaintext highlighter-rouge">reflect</code> package.</li>
  <li><strong>Environment Variable Lookup</strong>: Checks for environment variables matching the <code class="language-plaintext highlighter-rouge">mapstructure</code> tag or field name and assigns their values to the corresponding struct fields.</li>
</ul>

<h3 id="example-usage">Example Usage</h3>

<p>For local development, you can use this package in conjunction with <a href="https://github.com/joho/godotenv">godotenv</a> to load environment variables from a <code class="language-plaintext highlighter-rouge">.env</code> file. This approach allows you to manage environment variables in a single file without cluttering your terminal or deployment configuration.</p>

<p>Create a <code class="language-plaintext highlighter-rouge">.env</code> file for local development:</p>

<pre><code class="language-env">APP_PORT=3000
ENVIRONMENT=local
</code></pre>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
    <span class="s">"log"</span>

    <span class="c">// auto load environment variables from .env file.</span>
    <span class="n">_</span> <span class="s">"github.com/joho/godotenv/autoload"</span>
    <span class="s">"your_project/config"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">cfg</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">config</span><span class="o">.</span><span class="n">LoadConfig</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">log</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to load configuration: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"App is running on port: %s in %s environment</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">cfg</span><span class="o">.</span><span class="n">AppPort</span><span class="p">,</span> <span class="n">cfg</span><span class="o">.</span><span class="n">Environment</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="advantages-of-this-approach">Advantages of This Approach</h3>

<ul>
  <li><strong>Simplicity</strong>: No external dependencies or libraries are required.</li>
  <li><strong>Environment-Driven</strong>: Reads directly from environment variables, which is ideal for containerized and cloud-based applications.</li>
  <li><strong>Customizable</strong>: Supports flexible mapping using struct tags or defaulting to field names.</li>
</ul>

<h3 id="setting-environment-variables">Setting Environment Variables</h3>

<p>To run your application with this configuration loader, set the required environment variables. For example:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">APP_PORT</span><span class="o">=</span>3000
<span class="nb">export </span><span class="nv">ENVIRONMENT</span><span class="o">=</span>production
</code></pre></div></div>

<h3 id="limitations">Limitations</h3>

<p>While this approach is simple and effective, it does have some limitations:</p>

<ul>
  <li><strong>Basic Type Support</strong>: This implementation works well for string values but would need extension for other types like integers or booleans.</li>
  <li><strong>No Validation</strong>: It assumes that the environment variables are correctly set without validating them.</li>
</ul>

<h3 id="extending-the-solution">Extending the Solution</h3>

<p>To address these limitations, you could:</p>

<ul>
  <li>Add support for type conversion for fields requiring non-string values.</li>
  <li>Include validation logic to ensure required fields are populated correctly.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>This lightweight configuration loader is a great fit for projects where simplicity and minimalism are key. By leveraging Go’s reflection capabilities, you can create a flexible and environment-driven configuration system without relying on external libraries. For larger projects, consider extending this solution or exploring established libraries if advanced features are needed.</p>

<p>You can try out the code on the Go Playground: <a href="https://go.dev/play/p/EhjsUVOCGPO">https://go.dev/play/p/EhjsUVOCGPO</a>.</p>]]></content><author><name>Jackson Tong</name><email>tongtoan2704@gmail.com</email></author><category term="go" /><category term="config" /><summary type="html"><![CDATA[Managing configuration in a Go project can be simple and highly productive, enhancing both maintainability and development speed. For small to medium-sized projects, a straightforward solution can often be more effective and easier to maintain. In this post, we’ll explore a lightweight and custom approach to handling configuration in Go using struct tags and environment variables.]]></summary></entry><entry><title type="html">Building a Simple Inversion of Control Container in Go</title><link href="/2024/12/29/building-a-simple-inversion-of-control-container-in-go.html" rel="alternate" type="text/html" title="Building a Simple Inversion of Control Container in Go" /><published>2024-12-29T00:00:00+00:00</published><updated>2024-12-29T00:00:00+00:00</updated><id>/2024/12/29/building-a-simple-inversion-of-control-container-in-go</id><content type="html" xml:base="/2024/12/29/building-a-simple-inversion-of-control-container-in-go.html"><![CDATA[<p>Inversion of Control (IoC) is a design principle that plays a key role in modern software architecture. IoC containers help manage dependencies by decoupling object creation from object usage, resulting in cleaner, more modular, and testable code.</p>

<p>While Go provides excellent support for dependency injection through libraries like <a href="https://github.com/uber-go/dig">Dig</a>, <a href="https://github.com/google/wire">Wire</a>, and <a href="https://github.com/uber-go/fx">Fx</a>, these libraries can be complex and require a steep learning curve. For simpler use cases, a lightweight IoC container might be a better fit.</p>

<p>This post demonstrates how to create a straightforward IoC container in Go. The implementation is designed to be thread-safe, easy to use, and minimalistic.</p>

<h2 id="implementing-the-ioc-container">Implementing the IoC Container</h2>

<h3 id="step-1-define-the-container-type-and-container-variable">Step 1: Define the Container Type and Container Variable</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">ioc</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
	<span class="s">"sync"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">container</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">services</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{}</span>
	<span class="n">mu</span>       <span class="n">sync</span><span class="o">.</span><span class="n">RWMutex</span>
<span class="p">}</span>

<span class="k">var</span> <span class="n">globalContainer</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">container</span><span class="p">{</span>
	<span class="n">services</span><span class="o">:</span> <span class="nb">make</span><span class="p">(</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{}),</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">container</code> struct stores registered services in a map and ensures thread-safe access using a read-write mutex. The <code class="language-plaintext highlighter-rouge">globalContainer</code> variable is a singleton instance of the <code class="language-plaintext highlighter-rouge">container</code> struct.</p>

<h3 id="step-2-define-the-register-function">Step 2: Define the Register Function</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">Register</span><span class="p">(</span><span class="n">name</span> <span class="kt">string</span><span class="p">,</span> <span class="n">service</span> <span class="k">interface</span><span class="p">{})</span> <span class="p">{</span>
	<span class="n">globalContainer</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
	<span class="k">defer</span> <span class="n">globalContainer</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>
	<span class="n">globalContainer</span><span class="o">.</span><span class="n">services</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">service</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">Register</code> function associates a name with a service and locks the container for writing to ensure thread safety.</p>

<h3 id="step-3-define-the-resolve-function">Step 3: Define the Resolve Function</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">Resolve</span><span class="p">[</span><span class="n">T</span> <span class="n">any</span><span class="p">](</span><span class="n">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">globalContainer</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">RLock</span><span class="p">()</span>
	<span class="k">defer</span> <span class="n">globalContainer</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">RUnlock</span><span class="p">()</span>

	<span class="n">service</span><span class="p">,</span> <span class="n">exists</span> <span class="o">:=</span> <span class="n">globalContainer</span><span class="o">.</span><span class="n">services</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
	<span class="k">if</span> <span class="o">!</span><span class="n">exists</span> <span class="p">{</span>
		<span class="k">var</span> <span class="n">zero</span> <span class="n">T</span>
		<span class="k">return</span> <span class="n">zero</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"service not found: %s"</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">result</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">service</span><span class="o">.</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>
	<span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
		<span class="k">var</span> <span class="n">zero</span> <span class="n">T</span>
		<span class="k">return</span> <span class="n">zero</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"service type mismatch: expected %T"</span><span class="p">,</span> <span class="n">zero</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">result</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">Resolve</code> function retrieves a registered service by name and casts it to the specified type. It locks the container for reading, ensuring that concurrent reads are safe.</p>

<h2 id="using-the-ioc-container">Using the IoC Container</h2>

<p>Here is an example of how to use the IoC container to register and resolve a service:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
	<span class="s">"ioc"</span>
<span class="p">)</span>

<span class="k">const</span> <span class="n">myServiceName</span> <span class="o">=</span> <span class="s">"myService"</span>

<span class="k">type</span> <span class="n">MyService</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">Name</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c">// Register a service</span>
	<span class="n">ioc</span><span class="o">.</span><span class="n">Register</span><span class="p">(</span><span class="n">myServiceName</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">MyService</span><span class="p">{</span><span class="n">Name</span><span class="o">:</span> <span class="s">"Test Service"</span><span class="p">})</span>

	<span class="c">// Resolve the service</span>
	<span class="n">service</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">ioc</span><span class="o">.</span><span class="n">Resolve</span><span class="p">[</span><span class="o">*</span><span class="n">MyService</span><span class="p">](</span><span class="n">myServiceName</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Error:"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Service Name:"</span><span class="p">,</span> <span class="n">service</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This example registers a service with the container and then resolves it by name, demonstrating both the flexibility and simplicity of the implementation.</p>

<h2 id="enhancements-and-extensions">Enhancements and Extensions</h2>

<p>This basic IoC container can serve as a foundation for more advanced features, such as:</p>

<ul>
  <li><strong>Lifecycle Management</strong>: Adding support for transient, singleton, or scoped lifecycles.</li>
  <li><strong>Dependency Graph Resolution</strong>: Automatically resolving dependencies for complex services.</li>
  <li><strong>Configuration Support</strong>: Integrating with configuration files or environment variables for dynamic service registration.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Building a simple IoC container in Go is a great exercise to understand dependency injection and its benefits. While lightweight implementations like this are sufficient for many use cases, consider established libraries for larger or more complex projects.</p>

<p>For a deeper understanding of IoC and dependency injection, check out <a href="https://martinfowler.com/articles/injection.html">Martin Fowler’s article</a>.</p>

<p>You can explore the full source code here:</p>

<ol>
  <li><a href="https://gist.github.com/jacksontong/b05f00458416cb830ad6820a9cfc59f4">Gist: Simple IoC Container</a></li>
  <li><a href="https://go.dev/play/p/jgDjMHZNQBf">Go Playground Example</a></li>
</ol>

<p>I hope this guide helps you in your Go projects. If you have questions or suggestions, feel free to share them in the comments!</p>]]></content><author><name>Jackson Tong</name><email>tongtoan2704@gmail.com</email></author><category term="go" /><category term="ioc" /><summary type="html"><![CDATA[Inversion of Control (IoC) is a design principle that plays a key role in modern software architecture. IoC containers help manage dependencies by decoupling object creation from object usage, resulting in cleaner, more modular, and testable code.]]></summary></entry></feed>